{"version":3,"sources":["../src/Utils/calculate.ts","../src/Utils/fetchJSON.ts","../src/Utils/fetchText.ts","../src/Utils/isType.ts","../src/Utils/isArray.ts","../src/Utils/isAsyncFunction.ts","../src/Utils/isBoolean.ts","../src/Utils/isDate.ts","../src/Utils/isDevEnv.ts","../src/Utils/isEqual.ts","../src/Utils/isError.ts","../src/Utils/isFunction.ts","../src/Utils/isNull.ts","../src/Utils/isNumber.ts","../src/Utils/isObject.ts","../src/Utils/isRegExp.ts","../src/Utils/isString.ts","../src/Utils/isUndefined.ts","../src/Utils/isWhat.ts","../src/Utils/omit.ts","../src/Utils/padCenter.ts","../src/Utils/parseArgs.ts","../src/Utils/pick.ts","../src/Utils/replaceTokens.ts","../src/Utils/wait.ts"],"sourcesContent":["/*\n * taken from here\n * https://stackoverflow.com/a/75355272/4958977\n */\n\n/*\n * WTF!\n * parseFloat('-0') => -0 vs parseFloat(-0) => 0\n * -0 === 0 => true vs Object.is(-0, 0) => false\n */\nconst minus0Hack = (value: number) => (Object.is(value, -0) ? '-0' : value)\n\nconst operators: {\n  [operator: string]:\n    | {\n      func: (...args: string[]) => string;\n      precedence: number;\n      associativity: 'left' | 'right';\n      arity: number; // Needed by evalReversePolishNotation()\n    }\n    | undefined;\n} = {\n  '+': {\n    func: (x, y) => `${minus0Hack(Number(x) + Number(y))}`,\n    precedence: 1,\n    associativity: 'left',\n    arity: 2\n  },\n  '-': {\n    func: (x, y) => `${minus0Hack(Number(x) - Number(y))}`,\n    precedence: 1,\n    associativity: 'left',\n    arity: 2\n  },\n  '*': {\n    func: (x, y) => `${minus0Hack(Number(x) * Number(y))}`,\n    precedence: 2,\n    associativity: 'left',\n    arity: 2\n  },\n  '/': {\n    func: (x, y) => `${minus0Hack(Number(x) / Number(y))}`,\n    precedence: 2,\n    associativity: 'left',\n    arity: 2\n  },\n  '%': {\n    func: (x, y) => `${minus0Hack(Number(x) % Number(y))}`,\n    precedence: 2,\n    associativity: 'left',\n    arity: 2\n  },\n  '^': {\n    /*\n     * Why Math.pow() instead of **?\n     * -2 ** 2 => \"SyntaxError: Unary operator used immediately before exponentiation expression...\"\n     * Math.pow(-2, 2) => -4\n     */\n\n    func: (x, y) => `${minus0Hack(Math.pow(Number(x), Number(y)))}`,\n    precedence: 3,\n    associativity: 'right',\n    arity: 2\n  }\n}\n\nconst operatorsKeys = Object.keys(operators)\n\nconst functions: {\n  [operator: string]:\n    | {\n      func: (...args: string[]) => string;\n      // Needed by evalReversePolishNotation()\n      arity: number;\n    }\n    | undefined;\n} = {\n  min: { func: (x, y) => `${minus0Hack(Math.min(Number(x), Number(y)))}`, arity: 2 },\n  max: { func: (x, y) => `${minus0Hack(Math.max(Number(x), Number(y)))}`, arity: 2 },\n  sin: { func: x => `${minus0Hack(Math.sin(Number(x)))}`, arity: 1 },\n  cos: { func: x => `${minus0Hack(Math.cos(Number(x)))}`, arity: 1 },\n  tan: { func: x => `${minus0Hack(Math.tan(Number(x)))}`, arity: 1 },\n  log: { func: x => `${Math.log(Number(x))}`, arity: 1 } // No need for -0 hack\n}\n\nconst functionsKeys = Object.keys(functions)\n\n/**\n * Shunting yard algorithm: converts infix expression to postfix expression (reverse Polish notation)\n *\n * Example: ['1', '+', '2'] => ['1', '2', '+']\n *\n * https://en.wikipedia.org/wiki/Shunting_yard_algorithm\n * https://github.com/poteat/shunting-yard-typescript\n * https://blog.kallisti.net.nz/2008/02/extension-to-the-shunting-yard-algorithm-to-allow-variable-numbers-of-arguments-to-functions/\n */\nfunction shuntingYard (tokens: string[]) {\n  const output = new Array<string>()\n  const operatorStack = new Array<string>()\n\n  for (const token of tokens) {\n    if (functions[token] !== undefined) {\n      operatorStack.push(token)\n    } else if (token === ',') {\n      while (operatorStack.length > 0 && operatorStack.at(-1) !== '(') {\n        output.push(operatorStack.pop()!)\n      }\n      if (operatorStack.length === 0) {\n        throw new Error('Misplaced \\',\\'')\n      }\n    } else if (operators[token] !== undefined) {\n      const o1 = token\n      while (\n        operatorStack.length > 0 &&\n        operatorStack.at(-1) !== undefined &&\n        operatorStack.at(-1) !== '(' &&\n        (operators[operatorStack.at(-1)!]!.precedence > operators[o1]!.precedence ||\n          (operators[o1]!.precedence === operators[operatorStack.at(-1)!]!.precedence &&\n            operators[o1]!.associativity === 'left'))\n      ) {\n        output.push(operatorStack.pop()!) // o2\n      }\n      operatorStack.push(o1)\n    } else if (token === '(') {\n      operatorStack.push(token)\n    } else if (token === ')') {\n      while (operatorStack.length > 0 && operatorStack.at(-1) !== '(') {\n        output.push(operatorStack.pop()!)\n      }\n      if (operatorStack.length > 0 && operatorStack.at(-1) === '(') {\n        operatorStack.pop()\n      } else {\n        throw new Error('Parentheses mismatch')\n      }\n      if (functions[operatorStack.at(-1)!] !== undefined) {\n        output.push(operatorStack.pop()!)\n      }\n    } else {\n      output.push(token)\n    }\n  }\n\n  // Remaining items\n  while (operatorStack.length > 0) {\n    const operator = operatorStack.at(-1)\n    if (operator === '(') {\n      throw new Error('Parentheses mismatch')\n    } else {\n      output.push(operatorStack.pop()!)\n    }\n  }\n\n  return output\n}\n\n/**\n * Evaluates reverse Polish notation (RPN) (postfix expression).\n *\n * Example: ['1', '2', '+'] => 3\n *\n * https://en.wikipedia.org/wiki/Reverse_Polish_notation\n * https://github.com/poteat/shunting-yard-typescript\n */\nfunction evalReversePolishNotation (tokens: string[]) {\n  const stack = new Array<string>()\n\n  const ops = { ...operators, ...functions }\n\n  for (const token of tokens) {\n    const op = ops[token]\n\n    if (op !== undefined) {\n      const parameters = []\n      for (let i = 0; i < op.arity; i++) {\n        parameters.push(stack.pop()!)\n      }\n      stack.push(op.func(...parameters.reverse()))\n    } else {\n      stack.push(token)\n    }\n  }\n\n  if (stack.length > 1) {\n    throw new Error('Insufficient operators')\n  }\n\n  return Number(stack[0])\n}\n\n/**\n * Breaks a mathematical expression into tokens.\n *\n * Example: \"1 + 2\" => [1, '+', 2]\n *\n * https://gist.github.com/tchayen/44c28e8d4230b3b05e9f\n */\nfunction tokenize (expression: string) {\n  // \"1  +\" => \"1 +\"\n  const expr = expression.replace(/\\s+/g, ' ')\n\n  const tokens = []\n\n  let acc = ''\n  let currentNumber = ''\n\n  for (let i = 0; i < expr.length; i++) {\n    const c = expr.charAt(i)\n    const prevC = expr.charAt(i - 1) // '' if index out of range\n    const nextC = expr.charAt(i + 1) // '' if index out of range\n\n    const lastToken = tokens.at(-1)\n\n    const numberParsingStarted = currentNumber !== ''\n\n    if (\n      // 1\n      /\\d/.test(c) ||\n      // Unary operator: +1 or -1\n      ((c === '+' || c === '-') &&\n        !numberParsingStarted &&\n        (lastToken === undefined ||\n          lastToken === ',' ||\n          lastToken === '(' ||\n          operatorsKeys.includes(lastToken)) &&\n        /\\d/.test(nextC))\n    ) {\n      currentNumber += c\n    } else if (c === '.') {\n      if (numberParsingStarted && currentNumber.includes('.')) {\n        throw new Error(`Double '.' in number: '${currentNumber}${c}'`)\n      } else {\n        currentNumber += c\n      }\n    } else if (c === ' ') {\n      if (/\\d/.test(prevC) && /\\d/.test(nextC)) {\n        throw new Error(`Space in number: '${currentNumber}${c}${nextC}'`)\n      }\n    } else if (functionsKeys.includes(acc + c)) {\n      acc += c\n      if (!functionsKeys.includes(acc + nextC)) {\n        tokens.push(acc)\n        acc = ''\n      }\n    } else if (operatorsKeys.includes(c) || c === '(' || c === ')' || c === ',') {\n      if (\n        operatorsKeys.includes(c) &&\n        !numberParsingStarted &&\n        operatorsKeys.includes(lastToken!)\n      ) {\n        throw new Error(`Consecutive operators: '${lastToken!}${c}'`)\n      }\n      if (numberParsingStarted) {\n        tokens.push(currentNumber)\n      }\n      tokens.push(c)\n      currentNumber = ''\n    } else {\n      acc += c\n    }\n  }\n\n  if (acc !== '') {\n    throw new Error(`Invalid characters: '${acc}'`)\n  }\n\n  // Add last number to the tokens\n  if (currentNumber !== '') {\n    tokens.push(currentNumber)\n  }\n\n  /*\n   * ['+', '1'] => ['0', '+', '1']\n   * ['-', '1'] => ['0', '-', '1']\n   */\n  if (tokens[0] === '+' || tokens[0] === '-') {\n    tokens.unshift('0')\n  }\n\n  return tokens\n}\n\nexport function calculate (expression: string): number {\n  const tokens = tokenize(expression)\n  const rpn = shuntingYard(tokens)\n\n  return evalReversePolishNotation(rpn)\n}\n","export async function fetchJSON <T = any> (...[ input, init ]: Parameters<typeof fetch>): Promise<T> {\n  const res = await fetch(input, init)\n\n  return res.json() as T\n}\n","export async function fetchText <T = string> (...[ input, init ]: Parameters<typeof fetch>): Promise<T> {\n  const res = await fetch(input, init)\n\n  return res.text() as T\n}\n","export function isType (type: ObjectType, object: any): boolean {\n  return Object.prototype.toString.call(object) === `[object ${type}]`\n}\n\nexport type ObjectType = 'Array' | 'AsyncFunction' | 'Boolean' | 'Date' | 'Error' | 'Function' | 'Null' | 'Number' | 'Object' | 'RegExp' | 'String' | 'Undefined'\n","import { isType } from './isType'\n\nexport function isArray (object: any): boolean {\n  return isType('Array', object)\n}\n\n","import { isType } from './isType'\n\nexport function isAsyncFunction (object: any): boolean {\n  return isType('AsyncFunction', object)\n}\n","import { isType } from './isType'\n\nexport function isBoolean (object: any): boolean {\n  return isType('Boolean', object)\n}\n","import { isType } from './isType'\n\nexport function isDate (object: any): boolean {\n  return isType('Date', object)\n}\n","import { env } from 'node:process'\n\nexport function isDevEnv (): boolean {\n  return (env.NODE_ENV?.startsWith('prod') ?? false) === false\n}\n","export function isEqual <T> (a: T, b: T): boolean {\n  if (a === b) {\n    return true\n  }\n\n  const bothAreObjects = a && b && typeof a === 'object' && typeof b === 'object'\n\n  return Boolean(\n    bothAreObjects &&\n    Object.keys(a).length === Object.keys(b).length &&\n    Object.entries(a).every(([ k, v ]) => isEqual(v, b[k as keyof T]))\n  )\n}\n","import { isType } from './isType'\n\nexport function isError (object: any): boolean {\n  return isType('Error', object)\n}\n","import { isType } from './isType'\n\nexport function isFunction (object: any): boolean {\n  return isType('Function', object)\n}\n","import { isType } from './isType'\n\nexport function isNull (object: any): boolean {\n  return isType('Null', object)\n}\n","import { isType } from './isType'\n\nexport function isNumber (object: any): boolean {\n  return isType('Number', object)\n}\n","import { isType } from './isType'\n\nexport function isObject (object: any): boolean{\n  return isType('Object', object)\n}\n","import { isType } from './isType'\n\nexport function isRegExp (object: any): boolean {\n  return isType('RegExp', object)\n}\n","import { isType } from './isType'\n\nexport function isString (object: any): boolean {\n  return isType('String', object)\n}\n","import { isType } from './isType'\n\nexport function isUndefined (object: any): boolean {\n  return isType('Undefined', object)\n}\n","import type { ObjectType } from './isType'\n\nexport function isWhat (object: any): ObjectType {\n  return Object.prototype.toString.call(object).match(/\\[object (?<type>\\w+)\\]/)!.groups!.type as ObjectType\n}\n","export function omit <T extends object> (obj: T, ...keys: (keyof T & string)[]): Omit<T, keyof T> {\n  return keys.reduce((filtered: Omit<T, keyof T>, key: keyof T) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { [key]: omitted, ...rest } = filtered\n    return rest\n  }, obj)\n}\n","export function padCenter (str: string, maxLen: number): string {\n  return str.padStart((str.length + maxLen) / 2).padEnd(maxLen)\n}\n","import { argv } from 'node:process'\n\nconst parseArgBool: (argValue: string | undefined) => boolean | string = argValue => {\n  const argValueLower = argValue?.toLowerCase()\n\n  if (argValueLower === 'false') return false\n  if (argValueLower === 'true') return true\n  if (argValueLower != null) return argValue as string\n\n  return true\n}\n\nexport function parseArgs (): Args {\n  return argv.slice(2).reduce((args, arg) => {\n    const isLong = arg.slice(0, 2) === '--'\n    const isArray = isLong && (/^--\\w+\\[\\]=/).test(arg)\n    const isShort = !isLong && arg.slice(0, 1) === '-'\n\n    // long string or boolean args\n    if (isLong && isArray === false) {\n      const [ flag, value ] = arg.slice(2).split('=')\n\n      args[flag as keyof Args] ??= parseArgBool(value)\n    }\n\n    // short boolean args\n    if (isShort) arg.slice(1).split('').forEach(flag => (args[flag] ??= true))\n\n    // array args\n    if (isArray) {\n      const [ flag, value ] = arg.slice(2).split('[]=')\n\n      ;(args[flag as keyof Args] as string []) ??= [] as string[]\n      ;(args[flag as keyof Args] as string []).push(value as string)\n    }\n\n    return args\n  }, {} as Args)\n}\n\nexport interface Args {\n  [flag: string]: string | string[] | boolean\n}\n\n","export function pick <T extends object> (obj: T, ...keys: (keyof T & string)[]): Pick<T, keyof T> {\n  return keys.reduce((acc: Pick<T, keyof T>, key: keyof T) => {\n    return (acc = Object.assign(acc, { [key]: obj[key] }))\n  }, {} as Pick<T, keyof T>)\n}\n","export function replaceTokens (string: string, tokens: TokenMap): string {\n  for (const [ token, value ] of Object.entries(tokens)) {\n    string = string.replaceAll(token, value)\n  }\n\n  return string\n}\n\nexport interface TokenMap {\n  [token: string]: string\n}\n","export function wait (delay: WaitOptions): Promise<void> {\n  const { promise, resolve } = Promise.withResolvers<void>()\n  const { minutes = 0, seconds = 0, milliseconds = 0 } = delay\n\n  setTimeout(resolve, (1000 * 60 * minutes) + (1000 * seconds) + milliseconds)\n\n  return promise\n}\n\nexport interface WaitOptions {\n  minutes?: number\n  seconds?: number\n  milliseconds?: number\n}\n"],"mappings":"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","names":["isArray"]}