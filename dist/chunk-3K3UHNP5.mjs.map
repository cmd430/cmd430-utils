{"version":3,"sources":["../src/Log/Colors/random.ts","../src/Log/Formatting/bold.ts","../src/Log/Formatting/html.ts","../src/Log/Formatting/italic.ts","../src/Log/Formatting/strip.ts","../src/Log/Formatting/underline.ts","../src/Classes/Logger.ts","../src/Classes/Emitter.ts"],"sourcesContent":["import type { ColorFN } from '.'\nimport { randomInt } from 'node:crypto'\n\nconst colors: Colors = Object.fromEntries(Object.entries(await import('./colors')))\n\nexport const random: ColorFN = (...args) => Object.values(colors)[randomInt(Object.keys(colors).length)]!(...args)\n\ninterface Colors {\n  [color: string]: ColorFN\n}\n","import type { FormattingFN } from '.'\nimport { parse } from '../Private'\n\nexport const bold: FormattingFN = (...args) => `\\x1b[1m${parse({ colors: false }, ...args)}\\x1b[22m`\n","import type { FormatFN } from '.'\n\nexport const html: FormatFN = arg => {\n  // eslint-disable-next-line no-control-regex\n  for (const { groups } of arg.matchAll(/(?<full>\\x1b[[(?);]{0,2}(?<code>;?\\d*).)/g)) {\n    const { full, code } = groups as { full: string, code: string }\n\n    switch (code) {\n      case '1': { // bold\n        arg = arg.replaceAll(full, '<b>')\n        break\n      }\n      case '22': { // end bold\n        arg = arg.replaceAll(full, '</b>')\n        break\n      }\n      case '3': { // italic\n        arg = arg.replaceAll(full, '<i>')\n        break\n      }\n      case '23': { // end italic\n        arg = arg.replaceAll(full, '</i>')\n        break\n      }\n      case '4': { // underline\n        arg = arg.replaceAll(full, '<u>')\n        break\n      }\n      case '24': { // end underline\n        arg = arg.replaceAll(full, '</u>')\n        break\n      }\n      case '32': { // Green\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(139, 180, 62)\">')\n        break\n      }\n      case '33': { // Yellow\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(179, 182, 63)\">')\n        break\n      }\n      case '35': { // Purple\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(150, 121, 202)\">')\n        break\n      }\n      case '90': { // Bright Grey\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(145, 145, 145)\">')\n        break\n      }\n      case '91': { // Bright Red\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(205, 64, 38)\">')\n        break\n      }\n      case '92': { // Bright Green\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(131, 212, 70)\">')\n        break\n      }\n      case '93': { // Bright Yellow\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(223, 199, 63)\">')\n        break\n      }\n      case '95': { // Bright Purple\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(171, 127, 250)\">')\n        break\n      }\n      case '96': { // Bright Cyan\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(121, 212, 237)\">')\n        break\n      }\n      case '97': { // Bright White\n        arg = arg.replaceAll(full, '<span style=\"color: rgb(255, 255, 255)\">')\n        break\n      }\n      case '39': // default\n      case '0': { // reset\n        arg = arg.replaceAll(full, '</span>')\n        break\n      }\n      default: { // strip unknown\n        arg = arg.replaceAll(full, '')\n      }\n    }\n  }\n\n  return arg\n}\n","import type { FormattingFN } from '.'\nimport { parse } from '../Private'\n\nexport const italic: FormattingFN = (...args) => `\\x1b[3m${parse({ colors: false }, ...args)}\\x1b[23m`\n","import type { FormatFN } from '.'\n\n// eslint-disable-next-line no-control-regex\nexport const strip: FormatFN = arg => arg.replace(/\\x1b[[(?);]{0,2}(;?\\d)*./g, '')\n","import type { FormattingFN } from '.'\nimport { parse } from '../Private'\n\nexport const underline: FormattingFN = (...args) => `\\x1b[4m${parse({ colors: false }, ...args)}\\x1b[24m`\n","import type { LogType } from '../Log/Private'\nimport { grey, red, yellow, magenta, cyan, white, type ColorFN } from '../Log/Colors'\nimport { strip } from '../Log/Formatting'\nimport { parse, timestamp as currentTimestamp, formatting as supportsFormatting } from '../Log/Private'\nimport { isString, isDevEnv, padCenter } from '../Utils'\n\ninterface LogTagOptions {\n  center?: boolean\n  centerPadInner?: boolean\n  formatting?: boolean\n  showHidden?: boolean\n  devOnly?: boolean\n}\n\nconst timestamp: () => string = () => grey(`[${currentTimestamp()}]`)\nconst filterMessage: (args: any[]) => any[] = args => args.filter(a => a)\nconst paddedTag: (tag: string, length?: number) => string = (tag, length = 7) => tag.padEnd(length)\n\nexport class Logger {\n\n  private static _maxTagLength = 0\n\n  private _tag = ''\n  private _tagCenter = true\n  private _tagCenterPadInner = true\n  private _tagDevOnly = false\n  private _formatting = true\n  private _showHidden = false\n\n  constructor (tag?: string, tagOpts?: LogTagOptions) {\n    // Allow destructuring the methods\n    this.debug = this.debug.bind(this)\n    this.log = this.log.bind(this)\n    this.info = this.info.bind(this)\n    this.warn = this.warn.bind(this)\n    this.error = this.error.bind(this)\n\n    this._tag = tag?.trim() ?? ''\n    this._tagCenter = tagOpts?.center ?? true\n    this._tagCenterPadInner = tagOpts?.centerPadInner ?? true\n    this._tagDevOnly = tagOpts?.devOnly ?? false\n    this._formatting = tagOpts?.formatting ?? supportsFormatting()\n    this._showHidden = tagOpts?.showHidden ?? false\n\n    if (this._tag) this._tag = `[ ${this._tag} ]`\n    // eslint-disable-next-line no-underscore-dangle\n    if (this._tag && this._tag.length > Logger._maxTagLength) Logger._maxTagLength = this._tag.length\n  }\n\n  private _logTag () {\n    if (this._tagDevOnly === true && isDevEnv() === false) return ''\n    if (this._tagCenter) {\n      // eslint-disable-next-line no-underscore-dangle\n      if (this._tagCenterPadInner) return this._tag ? white(`[${padCenter(this._tag.slice(1,-1), Logger._maxTagLength - 2)}]`) : paddedTag('', Logger._maxTagLength)\n      // eslint-disable-next-line no-underscore-dangle\n      return this._tag ? white(padCenter(this._tag, Logger._maxTagLength)) : paddedTag('', Logger._maxTagLength)\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    return this._tag ? white(paddedTag(this._tag, Logger._maxTagLength)) : paddedTag('', Logger._maxTagLength)\n  }\n\n  private _msg (type: LogType, color: ColorFN, ...args: any[]) {\n    // eslint-disable-next-line no-console\n    return console[type](...filterMessage([\n      timestamp(),\n      this._logTag(),\n      color(paddedTag(`[${type.toUpperCase()}]`)),\n      parse({\n        colors: true,\n        showHidden: type === 'debug' ? true : this._showHidden,\n        logType: type\n      }, ...args)\n    ]).map(arg => isString(arg) && this._formatting === false ? strip(arg) : arg))\n  }\n\n  public log (...args: Parameters<typeof console.log>): void {\n    return this._msg('log', white, ...args)\n  }\n\n  public info (...args: Parameters<typeof console.info>): void {\n    return this._msg('info', cyan, ...args)\n  }\n\n  public warn (...args: Parameters<typeof console.warn>): void {\n    return this._msg('warn', yellow, ...args)\n  }\n\n  public error (...args: Parameters<typeof console.error>): void {\n    return this._msg('error', red, ...args)\n  }\n\n  public debug (...args: Parameters<typeof console.debug>): void {\n    return isDevEnv() ? this._msg('debug', magenta, ...args) : undefined\n  }\n\n}\n","import { randomUUID } from 'node:crypto'\n\nexport type Handler<Data = any> = (data: Data) => void\n\n/**\n * Emitter\n * - Pass an `EventMap` for strongly typed events\n * - Ommit passing an `EventMap` to have `string: any` event types\n */\nexport class Emitter<EventMap = { [E: string]: any }> {\n\n  private _events: Map<string, Handler> = new Map()\n  private _eventIds: Map<string, Set<string>> = new Map()\n\n  /**\n   * Adds an event lister for `event` with a `handler` that is called on the event\n   */\n  public on <Event extends keyof EventMap & string, Data = EventMap[Event]> (event: Event, handler: Handler<Data>): void {\n    const ids = this._eventIds.get(event) ?? new Set()\n    const id = randomUUID()\n\n    this._eventIds.set(event, ids.add(id))\n    this._events.set(id, handler)\n  }\n\n  /**\n   * Adds an event lister for `event` with a `handler` that is called on the event\n   * but is automatically removed after the event fires once\n   */\n  public once <Event extends keyof EventMap & string, Data = EventMap[Event]> (event: Event, handler: Handler<Data>): void {\n    const ids = this._eventIds.get(event) ?? new Set()\n    const id = randomUUID()\n\n    this._eventIds.set(event, ids.add(id))\n\n    const onceHandler: Handler = data => {\n      handler(data)\n      this.off(event, onceHandler)\n    }\n\n    this._events.set(id, onceHandler)\n  }\n\n  /**\n   * Removes an event lister for `event` with `handler`\n   */\n  public off <Event extends keyof EventMap & string, Data = EventMap[Event]> (event: Event, handler: Handler<Data>): void {\n    const ids = this._eventIds.get(event)\n    const [ id ] = this._events.entries().find(([ _, value ]: [ string, Handler ]) => value === handler) ?? []\n\n    this._events.delete(id!)\n    ids?.delete(id!)\n\n    if (ids && ids.size > 0) {\n      this._eventIds.set(event, ids)\n    } else {\n      this._eventIds.delete(event)\n    }\n  }\n\n  /**\n   * - Checks if an event lister for `event` with a `handler` is set\n   * - If `hander` is omitted checks if any `hander` for `event is set\n   */\n  public has <Event extends keyof EventMap & string, Data = EventMap[Event]> (event: Event, handler?: Handler<Data>): boolean {\n    const ids = this._eventIds.get(event)\n\n    if (ids == null || ids.size === 0) return false\n    if (handler == null) return true\n\n    for (const id of ids) {\n      if (this._events.get(id) === handler) return true\n    }\n\n    return false\n  }\n\n  /**\n   * Removes all event listers for `event`\n   */\n  public clear <Event extends keyof EventMap & string> (event: Event): void {\n    const ids = this._eventIds.get(event)\n\n    ids?.forEach(id => this._events.delete(id))\n    this._eventIds.delete(event)\n  }\n\n  /**\n   * Fires `event` with optional `data`\n   */\n  public emit <Event extends keyof EventMap & string, Data = EventMap[Event]> (event: Event, data?: Data): void {\n    const ids = this._eventIds.get(event)\n\n    ids?.forEach(id => this._events.get(id)?.(data))\n  }\n\n}\n"],"mappings":"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","names":["timestamp"]}